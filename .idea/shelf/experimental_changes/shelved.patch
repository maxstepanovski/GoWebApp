Index: main/domain/ApiProcessing.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main/domain/ApiProcessing.go	(date 1547023532000)
+++ main/domain/ApiProcessing.go	(date 1547023532000)
@@ -0,0 +1,97 @@
+package domain
+
+import (
+	"database/sql"
+	"encoding/json"
+	"firstChapter/main/models"
+	"fmt"
+	"net/http"
+	"strconv"
+)
+
+const DB_NAME = "mysql"
+const DB_CREDENTIALS = "root:i86Kwp5a@tcp(127.0.0.1:3306)/new_schema"
+const ENDPOINT = "/api/user"
+const LOCAL_HOST = ":8080"
+
+func CreateUser(responseWriter http.ResponseWriter, request *http.Request) {
+	User := models.User{}
+	User.ID, _ = strconv.Atoi(request.FormValue("id"))
+	User.Name = request.FormValue("name")
+	User.Email = request.FormValue("email")
+	User.First = request.FormValue("first")
+	User.Last = request.FormValue("last")
+	_, error := json.Marshal(User)
+	if error != nil {
+		fmt.Println("marshalling error!")
+	}
+
+	database, error := sql.Open(DB_NAME, DB_CREDENTIALS)
+	defer database.Close()
+
+	if error != nil {
+		fmt.Println("couldn't open db")
+	}
+
+	_, err := database.Exec(
+		"INSERT INTO users set ID='" + strconv.Itoa(User.ID) +
+			"', Nickname='" + User.Name +
+			"', First='" + User.First +
+			"', Last='" + User.Last +
+			"', Email='" + User.Email +
+			"'")
+	if err != nil {
+		fmt.Fprintf(responseWriter, err.Error())
+	}
+	fmt.Fprintf(responseWriter, "object written to database")
+	fmt.Fprintf(responseWriter, User.ToString())
+}
+
+/**
+Read a user from sql database via webapplication api
+*/
+func ReadUser(responseWriter http.ResponseWriter, request *http.Request) {
+	id := request.FormValue("id")
+	ReadUser := models.User{}
+
+	database, error := sql.Open(DB_NAME, DB_CREDENTIALS)
+	defer database.Close()
+	if error != nil {
+		fmt.Println("couldn't open db")
+	}
+
+	err := database.QueryRow("select * from users where ID=?", id).Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email)
+	if err != nil {
+		fmt.Fprintf(responseWriter, err.Error())
+	}
+	answer, _ := json.Marshal(ReadUser)
+	fmt.Fprintf(responseWriter, string(answer))
+}
+
+func RetrieveUsers(responseWriter http.ResponseWriter, request *http.Request) {
+	start := 0
+	limit := 10
+	next := start + limit
+	response := models.Users{}
+	responseWriter.Header().Set("Pragma", "no-cache")
+	responseWriter.Header().Set("Link", "<http://localhost:8080/api/user?start=" + string(next) + "; rel=\"next\"")
+	database, openErr := sql.Open(DB_NAME, DB_CREDENTIALS)
+	defer database.Close()
+	if openErr != nil {
+		fmt.Fprintf(responseWriter, openErr.Error())
+	}
+	rows, readErr := database.Query("select * from users LIMIT 10")
+	if readErr != nil {
+		fmt.Fprintf(responseWriter, readErr.Error())
+	}
+	for rows.Next() {
+		user := models.User{}
+		rows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email)
+		response.Users = append(response.Users, user)
+	}
+	jsonResponse, marshalErr := json.Marshal(response)
+	if marshalErr != nil {
+		fmt.Fprintf(responseWriter, marshalErr.Error())
+	}
+	fmt.Fprintf(responseWriter, string(jsonResponse))
+}
Index: main/secondary/api.go
===================================================================
--- main/secondary/api.go	(date 1545852381000)
+++ main/models/Api.go	(date 1546592615000)
@@ -1,4 +1,4 @@
-package secondary
+package models
 
 type API struct {
 	Message string "json:message"
Index: main/firstChapter.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"encoding/json\"\n\tsec \"firstChapter/main/secondary\"\n\t\"fmt\"\n\t\"github.com/drone/routes\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tmuxRouter := routes.New()\n\tmuxRouter.Get(\"/api/:name\", HandleFunction)\n\thttp.Handle(\"/\", muxRouter)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc HandleFunction(responseWriter http.ResponseWriter, request *http.Request) {\n\turlParams := request.URL.Query()\n\tname :=  urlParams.Get(\":name\")\n\t//surname := urlParams[\":surname\"]\n\ttext := \"Hello, \" + name\n\tmessage := sec.API{text}\n\tresponse, error := json.Marshal(message)\n\tif error != nil {\n\t\tfmt.Println(\"error happened!\")\n\t}\n\tfmt.Fprintf(responseWriter, string(response))\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main/firstChapter.go	(date 1545852381000)
+++ main/firstChapter.go	(date 1547023808000)
@@ -2,7 +2,7 @@
 
 import (
 	"encoding/json"
-	sec "firstChapter/main/secondary"
+	"firstChapter/main/models"
 	"fmt"
 	"github.com/drone/routes"
 	"net/http"
@@ -20,7 +20,7 @@
 	name :=  urlParams.Get(":name")
 	//surname := urlParams[":surname"]
 	text := "Hello, " + name
-	message := sec.API{text}
+	message := models.API{text}
 	response, error := json.Marshal(message)
 	if error != nil {
 		fmt.Println("error happened!")
Index: main/secondChapter.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"database/sql\"\n\t_ \"database/sql\"\n\t\"encoding/json\"\n\ts \"firstChapter/main/secondary\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nvar DB_NAME = \"mysql\"\nvar DB_CREDENTIALS = \"root:i86Kwp5a@tcp(127.0.0.1:3306)/new_schema\"\nvar ENDPOINT = \"/api/user\"\nvar LOCAL_HOST = \":8080\"\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(ENDPOINT, CreateUser).Methods(\"POST\")\n\trouter.HandleFunc(ENDPOINT, RetrieveUsers).Methods(\"GET\")\n\thttp.Handle(\"/\", router)\n\thttp.ListenAndServe(LOCAL_HOST, nil)\n}\n\n/**\nreading query parameters, creating User object and writing it to mySql database\n*/\nfunc CreateUser(responseWriter http.ResponseWriter, request *http.Request) {\n\tUser := s.User{}\n\tUser.ID, _ = strconv.Atoi(request.FormValue(\"id\"))\n\tUser.Name = request.FormValue(\"name\")\n\tUser.Email = request.FormValue(\"email\")\n\tUser.First = request.FormValue(\"first\")\n\tUser.Last = request.FormValue(\"last\")\n\t_, error := json.Marshal(User)\n\tif error != nil {\n\t\tfmt.Println(\"marshalling error!\")\n\t}\n\n\tdatabase, error := sql.Open(DB_NAME, DB_CREDENTIALS)\n\tdefer database.Close()\n\n\tif error != nil {\n\t\tfmt.Println(\"couldn't open db\")\n\t}\n\n\t_, err := database.Exec(\n\t\t\"INSERT INTO users set ID='\" + strconv.Itoa(User.ID) +\n\t\t\t\"', Nickname='\" + User.Name +\n\t\t\t\"', First='\" + User.First +\n\t\t\t\"', Last='\" + User.Last +\n\t\t\t\"', Email='\" + User.Email +\n\t\t\t\"'\")\n\tif err != nil {\n\t\tfmt.Fprintf(responseWriter, err.Error())\n\t}\n\tfmt.Fprintf(responseWriter, \"object written to database\")\n\tfmt.Fprintf(responseWriter, User.ToString())\n}\n\n/**\nRead a user from sql database via webapplication api\n*/\nfunc ReadUser(responseWriter http.ResponseWriter, request *http.Request) {\n\tid := request.FormValue(\"id\")\n\tReadUser := s.User{}\n\n\tdatabase, error := sql.Open(DB_NAME, DB_CREDENTIALS)\n\tdefer database.Close()\n\tif error != nil {\n\t\tfmt.Println(\"couldn't open db\")\n\t}\n\n\terr := database.QueryRow(\"select * from users where ID=?\", id).Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email)\n\tif err != nil {\n\t\tfmt.Fprintf(responseWriter, err.Error())\n\t}\n\tanswer, _ := json.Marshal(ReadUser)\n\tfmt.Fprintf(responseWriter, string(answer))\n}\n\nfunc RetrieveUsers(responseWriter http.ResponseWriter, request *http.Request) {\n\tresponse := s.Users{}\n\tresponseWriter.Header().Set(\"Pragma\", \"no-cache\")\n\tdatabase, openErr := sql.Open(DB_NAME, DB_CREDENTIALS)\n\tdefer database.Close()\n\tif openErr != nil {\n\t\tfmt.Fprintf(responseWriter, openErr.Error())\n\t}\n\trows, readErr := database.Query(\"select * from users LIMIT 10\")\n\tif readErr != nil {\n\t\tfmt.Fprintf(responseWriter, readErr.Error())\n\t}\n\tfor rows.Next() {\n\t\tuser := s.User{}\n\t\trows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email)\n\t\tresponse.Users = append(response.Users, user)\n\t}\n\tjsonResponse, marshalErr := json.Marshal(response)\n\tif marshalErr != nil {\n\t\tfmt.Fprintf(responseWriter, marshalErr.Error())\n\t}\n\tfmt.Fprintf(responseWriter, string(jsonResponse))\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main/secondChapter.go	(date 1545852381000)
+++ main/secondChapter.go	(date 1547023532000)
@@ -1,107 +1,27 @@
 package main
 
 import (
-	"database/sql"
-	_ "database/sql"
-	"encoding/json"
-	s "firstChapter/main/secondary"
-	"fmt"
-	_ "github.com/go-sql-driver/mysql"
+	"firstChapter/main/domain"
 	"github.com/gorilla/mux"
 	"net/http"
 	"strconv"
+	"strings"
 )
 
-var DB_NAME = "mysql"
-var DB_CREDENTIALS = "root:i86Kwp5a@tcp(127.0.0.1:3306)/new_schema"
-var ENDPOINT = "/api/user"
-var LOCAL_HOST = ":8080"
+
 
 func main() {
 	router := mux.NewRouter()
-	router.HandleFunc(ENDPOINT, CreateUser).Methods("POST")
-	router.HandleFunc(ENDPOINT, RetrieveUsers).Methods("GET")
+	router.HandleFunc(domain.ENDPOINT, domain.CreateUser).Methods("POST")
+	router.HandleFunc(domain.ENDPOINT, domain.RetrieveUsers).Methods("GET")
 	http.Handle("/", router)
-	http.ListenAndServe(LOCAL_HOST, nil)
+	http.ListenAndServe(domain.LOCAL_HOST, nil)
 }
-
-/**
-reading query parameters, creating User object and writing it to mySql database
-*/
-func CreateUser(responseWriter http.ResponseWriter, request *http.Request) {
-	User := s.User{}
-	User.ID, _ = strconv.Atoi(request.FormValue("id"))
-	User.Name = request.FormValue("name")
-	User.Email = request.FormValue("email")
-	User.First = request.FormValue("first")
-	User.Last = request.FormValue("last")
-	_, error := json.Marshal(User)
-	if error != nil {
-		fmt.Println("marshalling error!")
-	}
-
-	database, error := sql.Open(DB_NAME, DB_CREDENTIALS)
-	defer database.Close()
-
-	if error != nil {
-		fmt.Println("couldn't open db")
-	}
-
-	_, err := database.Exec(
-		"INSERT INTO users set ID='" + strconv.Itoa(User.ID) +
-			"', Nickname='" + User.Name +
-			"', First='" + User.First +
-			"', Last='" + User.Last +
-			"', Email='" + User.Email +
-			"'")
-	if err != nil {
-		fmt.Fprintf(responseWriter, err.Error())
-	}
-	fmt.Fprintf(responseWriter, "object written to database")
-	fmt.Fprintf(responseWriter, User.ToString())
-}
-
-/**
-Read a user from sql database via webapplication api
-*/
-func ReadUser(responseWriter http.ResponseWriter, request *http.Request) {
-	id := request.FormValue("id")
-	ReadUser := s.User{}
-
-	database, error := sql.Open(DB_NAME, DB_CREDENTIALS)
-	defer database.Close()
-	if error != nil {
-		fmt.Println("couldn't open db")
-	}
 
-	err := database.QueryRow("select * from users where ID=?", id).Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email)
-	if err != nil {
-		fmt.Fprintf(responseWriter, err.Error())
-	}
-	answer, _ := json.Marshal(ReadUser)
-	fmt.Fprintf(responseWriter, string(answer))
-}
-
-func RetrieveUsers(responseWriter http.ResponseWriter, request *http.Request) {
-	response := s.Users{}
-	responseWriter.Header().Set("Pragma", "no-cache")
-	database, openErr := sql.Open(DB_NAME, DB_CREDENTIALS)
-	defer database.Close()
-	if openErr != nil {
-		fmt.Fprintf(responseWriter, openErr.Error())
-	}
-	rows, readErr := database.Query("select * from users LIMIT 10")
-	if readErr != nil {
-		fmt.Fprintf(responseWriter, readErr.Error())
-	}
-	for rows.Next() {
-		user := s.User{}
-		rows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email)
-		response.Users = append(response.Users, user)
-	}
-	jsonResponse, marshalErr := json.Marshal(response)
-	if marshalErr != nil {
-		fmt.Fprintf(responseWriter, marshalErr.Error())
-	}
-	fmt.Fprintf(responseWriter, string(jsonResponse))
+func dbErrorParser(error string) (string, int64) {
+	parts := strings.Split(error, ":")
+	errorMessage := parts[1]
+	code := strings.Split(parts[0], "Error ")
+	errorCode, _ := strconv.ParseInt(code[1], 0, 32)
+	return errorMessage, errorCode
 }
Index: main/secondary/user.go
===================================================================
--- main/secondary/user.go	(date 1545852381000)
+++ main/models/User.go	(date 1546592615000)
@@ -1,4 +1,4 @@
-package secondary
+package models
 
 import "strconv"
 
